// (Partially) Generated by CoffeeScript 2.0.2

var CONDITION, COUNTERBALANCE, DEBUG, LOCAL, PROLIFIC, LOG_DEBUG, handleError, psiturk, saveData, startExperiment, submitHit;

var searchParams = new URLSearchParams(location.search)

LOCAL = false;
DEBUG = searchParams.get('debug') == 'true';
if (mode === "demo" || mode == "{{ mode }}") {
  LOCAL = true;
  condition = "0";
  counterbalance = "0";
}

if (DEBUG) {
  console.log("DEBUG  MODE");
  CONDITION = 0;
  COUNTERBALANCE = 0
  LOG_DEBUG = function(...args) {
    return console.log(...args);
  };
} else {
  console.log("NORMAL MODE");
  CONDITION = parseInt(condition);
  COUNTERBALANCE = parseInt(counterbalance);
  LOG_DEBUG = function(...args) {
    return null;
  };
}

// ---------- Initialize PsiTurk ---------- #
psiturk = new PsiTurk(uniqueId, adServerLoc, mode);
psiturk.recordUnstructuredData('startTime', String(new Date()))

saveData = function() {
  console.log('saveData');
  return new Promise(function(resolve, reject) {
    var timeout;
    if (LOCAL || mode == 'demo') {
      resolve('local');
      return
    }
    timeout = delay(10000, function() {
      console.log('TIMEOUT');
      return reject('timeout');
    });
    return psiturk.saveData({
      error: function() {
        clearTimeout(timeout);
        console.log('Error saving data!');
        return reject('error');
      },
      success: function() {
        clearTimeout(timeout);
        console.log('Data saved to psiturk server.');
        return resolve();
      }
    });
  });
};

// ---------- Test connection to server, then initialize the experiment. ---------- #
// initializeExperiment is defined in experiment.coffee
$(window).on('load', function() {
  return saveData()
  .then(function() {
    return delay(LOCAL ? 0 : 500, function() {
      $('#welcome').hide();
      if (LOCAL) {
        return initializeExperiment();
      } else {
        return initializeExperiment().catch(handleError);
      }
    });
  })
  .catch(function() {
    return $('#data-error').show();
  });
});

// This function is called once at the end of initializeExperiment.
startExperiment = function(config) {
  var defaults;
  LOG_DEBUG('run');
  defaults = {
    show_progress_bar: false,
    display_element: 'jspsych-target',
    on_finish: function() {
      console.log('on_finish')
      if (DEBUG) {
        return jsPsych.data.displayData();
      } else {
        return submitHit();
      }
    },
    on_data_update: function(data) {
      console.log('data', data);
      return psiturk.recordTrialData(data);
    }
  };
  return jsPsych.init(_.extend(defaults, config));
};

completeHIT = async function() {
  await $.ajax("complete_exp", {
    type: "POST",
    data: {uniqueId}
  });
  $('#jspsych-target').empty()
  console.log('completeHIT')
  if (PROLIFIC_CODE != null) {
    $("#load-icon").remove()
    $(window).off("beforeunload");
    $('body').html(`
      <div class='jspsych-content'>
          <h1>Thanks!</h1>

          <p>
          Your completion code is <b>${PROLIFIC_CODE}</b>
          Click this link to submit<br>
          <a href=https://app.prolific.co/submissions/complete?cc=${PROLIFIC_CODE}>
              https://app.prolific.co/submissions/complete?cc=${PROLIFIC_CODE}
          </a>
          <p>
      </div>
    `)
  } else {
    // psiturk.completeHIT()
  }
}

function setTimeoutPromise(ms) {
  return new Promise((res) => setTimeout(res, ms));
}

submitHit = function() {
  var promptResubmit, triesLeft;
  console.log('submitHit');
  $('#jspsych-target').html(`
    <h1>Saving data</h1>

    <p>Please do <b>NOT</b> refresh or leave the page!

    <div id="load-icon"/>

    <div id="submit-error" class="alert alert-danger">
      <strong>Error!</strong>
      We couldn't contact the database. We will try <b><span id="ntry"/></b> more times
      before continuing without saving the data.
    </div>
  `);
  $("#submit-error").hide()
  triesLeft = 3;
  let timeoutMS = 1000;
  promptResubmit = function() {
    console.log('promptResubmit');
    if (triesLeft) {
      console.log('try again', triesLeft);
      $("#submit-error").show()
      $("#ntry").html(triesLeft)
      triesLeft -= 1;
      timeoutMS *= 1.5; // Exponential backoff.
      return setTimeoutPromise(timeoutMS).then(saveData).catch(promptResubmit);
    } else {
      console.log('GIVE UP');
      $('#jspsych-target').html(`
        <h1>Saving data</h1>

        <div class="alert alert-danger">
          <strong>Error!</strong>
          We couldn't save your data! Please send us a message on Prolific,
          then click the button below.
        </div>
        <br><br>
        <button class='btn btn-primary btn-lg' id="resubmit">I reported the error</button>
      `);
      return new Promise(function(resolve) {
        return $('#resubmit').click(function() {
          $('#jspsych-target').empty()
          return resolve('gave up');
        });
      });
    }
  };
  return saveData(true).catch(promptResubmit).then(completeHIT)
};

handleError = function(e) {
  var link, message, msg;
  console.log('Erorr in experiment', e);
  if (e.stack) {
    msg = e.stack;
  } else if (e.name != null) {
    msg = e.name;
    if (e.message) {
      msg += ': ' + e.message;
    }
  } else {
    msg = e;
  }
  psiturk.recordUnstructuredData('error', msg);
  message = `<pre>
    Prolific Id: ${(typeof workerId !== "undefined" && workerId !== null ? workerId[0] : 'N/A')}
    ${msg}
  </pre>`;
  
  link = `<a href="mailto:fredcallaway@princeton.edu?subject=ERROR in experiment&
    body=${encodeURIComponent(message)}">Click here</a>`;
  $('#jspsych-target').html(markdown(`
    # The experiment encountered an error!

    <b>${link}</b> to report the error by email. Please describe at what point in the
    study the error occurred, and include the following information
    (it should be included automatically if you click the link).

    ${message}

    After reporting the error, click the button below to submit your data
    and see the completion code.

    <button id="submit">I reported the error</button>`));

  return $('#submit').click(submitHit);
};
